stages:
  - build_idf
  - deploy

variables:
  BATCH_BUILD: "1"
  V: "0"
  MAKEFLAGS: "-j5 --no-keep-going"
  IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
  IDF_CI_BUILD: "1"

build_idf_demo:
  stage: build_idf
  image: $CI_DOCKER_REGISTRY/esp-env-v5.0:2
  tags:
    - build
  script:
  # add gitlab ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git --version
    - git clone --recursive -b v5.0 --depth 1 $GITLAB_SSH_SERVER/idf/esp-idf.git
    - export IDF_PATH=$CI_PROJECT_DIR/esp-idf
    - cd esp-idf/
    - ./install.sh
    - . ./export.sh
    - cd -
    - cd examples/wireless_debug
    - idf.py build
    - rm -rf build/ sdkconfig
    - idf.py set-target esp32s2
    - idf.py build
    - rm -rf build/ sdkconfig
    - idf.py set-target esp32c3
    - idf.py build
    - cd -
    - cd examples/get-started
    - idf.py build
    - cd -
    - cd examples/control
    - idf.py build
    - cd -
    - cd examples/ota
    - idf.py build
    - cd -
    - cd examples/provisioning
    - idf.py build
    - cd -
    - cd examples/security
    - idf.py build
    - cd -
    - cd examples/solution
    - idf.py build

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp-now.git
    # What the next line of script does: goes through the list of refs for all branches we push to github,
    # generates a snippet of shell which is evaluated. The snippet checks CI_BUILD_REF against the SHA
    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch
    # and then pushes that ref to a corresponding github branch
    #
    # NB: In gitlab 9.x, CI_BUILD_REF was deprecated. New name is CI_COMMIT_REF. If below command suddenly
    # generates bash syntax errors, this is probably why.
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_BUILD_REF == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)
